// Code generated by MockGen. DO NOT EDIT.
// Source: client/openmeteo.go
//
// Generated by this command:
//
//	mockgen --source=client/openmeteo.go --destination=mocks/openmeteoClient_mock.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOpenMeteoClient is a mock of OpenMeteoClient interface.
type MockOpenMeteoClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenMeteoClientMockRecorder
}

// MockOpenMeteoClientMockRecorder is the mock recorder for MockOpenMeteoClient.
type MockOpenMeteoClientMockRecorder struct {
	mock *MockOpenMeteoClient
}

// NewMockOpenMeteoClient creates a new mock instance.
func NewMockOpenMeteoClient(ctrl *gomock.Controller) *MockOpenMeteoClient {
	mock := &MockOpenMeteoClient{ctrl: ctrl}
	mock.recorder = &MockOpenMeteoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenMeteoClient) EXPECT() *MockOpenMeteoClientMockRecorder {
	return m.recorder
}

// GetWeatherData mocks base method.
func (m *MockOpenMeteoClient) GetWeatherData(latitude, longitude string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherData", latitude, longitude)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetWeatherData indicates an expected call of GetWeatherData.
func (mr *MockOpenMeteoClientMockRecorder) GetWeatherData(latitude, longitude any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherData", reflect.TypeOf((*MockOpenMeteoClient)(nil).GetWeatherData), latitude, longitude)
}
